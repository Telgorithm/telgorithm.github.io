{"version":3,"file":"component---src-templates-term-tsx-content-file-path-terms-snowshoeing-index-md-b69d509d6869323f2945.js","mappings":"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","sources":["webpack://landing/./terms/snowshoeing/index.md","webpack://landing/./src/templates/term.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    em: \"em\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Snowshoeing, in the context of \", React.createElement(_components.a, {\n    href: \"https://www.telgorithm.com/glossary/hosted-sms-messaging/\"\n  }, \"SMS messaging\"), \", refers to the practice of distributing similar or identical messages across multiple phone numbers to circumvent message volume limitations and rate limits imposed by carriers. \"), \"\\n\", React.createElement(_components.p, null, \"This technique is often employed by spammers to avoid detection and to bypass the safeguards that carriers have in place to prevent unwanted and excessive messaging. \"), \"\\n\", React.createElement(_components.h2, null, \"How Snowshoeing Works\"), \"\\n\", React.createElement(_components.p, null, \"When \", React.createElement(_components.a, {\n    href: \"https://www.telgorithm.com/news/bulk-texting-for-business/\"\n  }, \"businesses send bulk SMS messages\"), \", carriers often impose limits on the number of messages that can be sent from a single phone number within a specific time frame. These limits are designed to control spam and protect recipients from receiving large volumes of unsolicited messages. \"), \"\\n\", React.createElement(_components.p, null, \"To evade these restrictions, those employing snowshoeing use several different phone numbers to send their messages. By spreading the message volume across multiple numbers, they can effectively increase the total number of messages sent without triggering rate limits or volume caps for any single number.\"), \"\\n\", React.createElement(_components.h2, null, \"Why Snowshoeing is Problematic\"), \"\\n\", React.createElement(_components.p, null, \"Snowshoeing is considered a deceptive and unethical practice because it undermines the mechanisms designed to protect consumers from spam and other forms of unwanted communication. \"), \"\\n\", React.createElement(_components.p, null, \"Since snowshoeing masks the true volume of messages being sent by distributing them across multiple numbers, it makes it more difficult for carriers to detect and block spam campaigns. This leads to an increase in unwanted messages reaching consumers, reducing the effectiveness of spam filters and damaging the overall trust in SMS communication.\"), \"\\n\", React.createElement(_components.p, null, \"Additionally, snowshoeing can lead to severe consequences for the sender, including the blocking of phone numbers, blacklisting by carriers, and penalties from regulatory bodies. \"), \"\\n\", React.createElement(_components.p, null, \"Carriers and service providers actively monitor for signs of snowshoeing and employ advanced detection methods to identify and block this type of activity. Once detected, the phone numbers involved are often blocked, and the sender’s reputation with the carrier may be permanently damaged, resulting in a loss of messaging capabilities.\"), \"\\n\", React.createElement(_components.h2, null, \"Regulatory and Carrier Stance\"), \"\\n\", React.createElement(_components.p, null, \"Most carriers and telecom regulators have strict policies against snowshoeing. For example, \", React.createElement(_components.a, {\n    href: \"https://www.telgorithm.com/\"\n  }, \"Telgorithm\"), \", a well-known provider in the \", React.createElement(_components.a, {\n    href: \"https://www.telgorithm.com/a2p-10dlc-guide/\"\n  }, \"A2P 10DLC\"), \" space, explicitly prohibits snowshoeing through their \", React.createElement(_components.a, {\n    href: \"https://www.telgorithm.com/policies/acceptable-use-policy/\"\n  }, \"Acceptable Use Policy\"), \", which underscores the seriousness with which the industry views snowshoeing and the commitment to preventing its use:\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, \"“Telgorithm does not permit snowshoeing, which is defined as spreading similar or identical messages across many phone numbers with the intent or effect of evading unwanted messaging detection and prevention mechanisms.”\")), \"\\n\", React.createElement(_components.p, null, \"The industry’s crackdown on snowshoeing is part of a broader effort to ensure that SMS messaging remains a trusted and reliable communication channel.\"), \"\\n\", React.createElement(_components.h2, null, \"Best Practices to Avoid Snowshoeing\"), \"\\n\", React.createElement(_components.p, null, \"To maintain \", React.createElement(_components.a, {\n    href: \"https://www.telgorithm.com/news/10dlc-compliance-faqs-answered/\"\n  }, \"10DLC compliance\"), \" and avoid the pitfalls of snowshoeing, it’s crucial for businesses to adopt best practices in their SMS marketing and communication strategies. This includes:\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"1. Message segmentation and targeting\"), \", where, instead of sending identical messages to a large audience, businesses should segment their audience and tailor messages to each group. Personalized and relevant content is more likely to be well-received and less likely to be flagged as spam.  \"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"2. Compliance with rate limits\"), \", or adhering to \", React.createElement(_components.a, {\n    href: \"https://www.telgorithm.com/news/a2p-10dlc-rate-limits/\"\n  }, \"carrier-imposed rate limits\"), \" and volume caps, is essential. Businesses should ensure that they are familiar with these limits and design their campaigns accordingly.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"3. Use of approved channels is key.\"), \" Utilizing approved and legitimate messaging channels, such as 10DLC (\", React.createElement(_components.a, {\n    href: \"https://www.telgorithm.com/glossary/10-digit-long-code-10dlc-numbers/\"\n  }, \"10-digit long codes\"), \"), \", React.createElement(_components.a, {\n    href: \"https://www.telgorithm.com/glossary/toll-free-numbers/\"\n  }, \"toll-free numbers\"), \", or shortcodes, can help ensure that messages are delivered within the rules and guidelines set by carriers.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"4. Transparency and consent\"), \" must be present. Always obtain explicit consent from recipients before sending SMS messages. Ensuring that recipients have opted in to receive messages reduces the likelihood of complaints and helps maintain a positive relationship with carriers and consumers.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"5. Monitoring and analytics\"), \" helps you stay on top of performance and compliance. Use analytics tools to track delivery rates, response rates, and any issues that may arise, allowing for quick adjustments to avoid non-compliant practices like snowshoeing.\"), \"\\n\", React.createElement(_components.h2, null, \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Snowshoeing is a risky and unethical practice that can have serious consequences for businesses involved in SMS messaging. \"), \"\\n\", React.createElement(_components.p, null, \"Understanding the implications of snowshoeing and adhering to best practices is crucial, enabling businesses to avoid the pitfalls associated with this practice, and ensuring that their messaging campaigns are both effective and compliant with industry regulations.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Telgorithm/website/landing/terms/snowshoeing/index.md\";\nimport {Link} from 'gatsby';\nimport React from 'react';\nimport {Helmet} from 'react-helmet';\nimport {PrimaryButton} from '../components/common/Buttons/Buttons';\nimport Layout from '../components/common/Layout/Layout';\nimport CustomLink from '../components/common/Link';\nimport {GatsbySeoComponent, TopLevelPageJSONLDSchemas} from '../components/common/SEO';\nimport {StyledBackground, TermButtons, TermContainer, TermDefinitionContainer, TermTitle, StyledTermPage, TermDefinition} from '../components/term/styled';\nimport {InternalLinks} from '../utils/links';\nimport {Text} from '../components/common/Text';\nimport {mapTermNodeToGlossaryTerm} from '../mappers';\nconst TermPage = _ref => {\n  var _data$mdx, _data$mdx2, _allTerms, _data$mdx4, _data$mdx4$fields, _data$mdx5, _data$mdx5$fields;\n  let {data, children} = _ref;\n  const {title, metaTitle} = (_data$mdx = data.mdx) === null || _data$mdx === void 0 ? void 0 : _data$mdx.frontmatter;\n  const description = data === null || data === void 0 ? void 0 : (_data$mdx2 = data.mdx) === null || _data$mdx2 === void 0 ? void 0 : _data$mdx2.excerpt;\n  const allTerms = data.allMdx.edges.map(edge => mapTermNodeToGlossaryTerm(edge.node));\n  const currentTermIndex = allTerms.findIndex(item => {\n    var _data$mdx3;\n    return item.id === ((_data$mdx3 = data.mdx) === null || _data$mdx3 === void 0 ? void 0 : _data$mdx3.id);\n  });\n  const nextTerm = (_allTerms = allTerms[currentTermIndex + 1]) !== null && _allTerms !== void 0 ? _allTerms : allTerms[0];\n  const getTitle = () => {\n    if (metaTitle) {\n      return metaTitle;\n    }\n    return title + \" | Telgorithm\";\n  };\n  return React.createElement(React.Fragment, null, React.createElement(Helmet, null, React.createElement(\"meta\", {\n    property: \"og:title\",\n    content: getTitle()\n  }), React.createElement(\"meta\", {\n    property: \"twitter:title\",\n    content: getTitle()\n  }), React.createElement(\"meta\", {\n    name: \"description\",\n    content: description\n  }), React.createElement(\"meta\", {\n    property: \"og:description\",\n    content: description\n  }), React.createElement(\"meta\", {\n    property: \"twitter:description\",\n    content: description\n  })), React.createElement(TopLevelPageJSONLDSchemas, {\n    url: 'https://www.telgorithm.com/glossary/' + ((_data$mdx4 = data.mdx) === null || _data$mdx4 === void 0 ? void 0 : (_data$mdx4$fields = _data$mdx4.fields) === null || _data$mdx4$fields === void 0 ? void 0 : _data$mdx4$fields.slug)\n  }), React.createElement(GatsbySeoComponent, {\n    canonicalUrl: 'https://www.telgorithm.com/glossary/' + ((_data$mdx5 = data.mdx) === null || _data$mdx5 === void 0 ? void 0 : (_data$mdx5$fields = _data$mdx5.fields) === null || _data$mdx5$fields === void 0 ? void 0 : _data$mdx5$fields.slug),\n    title: getTitle()\n  }), React.createElement(Layout, {\n    disabledContainer: true\n  }, React.createElement(StyledTermPage, null, React.createElement(StyledBackground, null), React.createElement(TermContainer, null, React.createElement(TermTitle, null, React.createElement(Text.Regular.Normal.md, null, \"Term\"), React.createElement(Text.Title.Bold.xl, null, title)), React.createElement(TermDefinitionContainer, null, React.createElement(Text.Regular.Normal.md, null, \"Definition\"), React.createElement(TermDefinition, null, children)), React.createElement(TermButtons, null, React.createElement(Link, {\n    to: InternalLinks.Glossary\n  }, React.createElement(PrimaryButton, null, \"Back To Glossary\")), React.createElement(CustomLink, {\n    arrow: true,\n    address: nextTerm === null || nextTerm === void 0 ? void 0 : nextTerm.url\n  }, \"View Next Term\"))))));\n};\nTermPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(TermPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst query = \"2188261531\";\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","h2","em","strong","_provideComponents","components","React","href","wrapper","MDXLayout","TermPage","_ref","_data$mdx","_data$mdx2","_allTerms","_data$mdx4","_data$mdx4$fields","_data$mdx5","_data$mdx5$fields","data","children","title","metaTitle","mdx","frontmatter","description","excerpt","allTerms","allMdx","edges","map","edge","mapTermNodeToGlossaryTerm","node","currentTermIndex","findIndex","item","_data$mdx3","id","nextTerm","getTitle","Helmet","property","content","name","TopLevelPageJSONLDSchemas","url","fields","slug","GatsbySeoComponent","canonicalUrl","Layout","disabledContainer","StyledTermPage","StyledBackground","TermContainer","TermTitle","Text","TermDefinitionContainer","TermDefinition","TermButtons","Link","to","InternalLinks","PrimaryButton","CustomLink","arrow","address","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}