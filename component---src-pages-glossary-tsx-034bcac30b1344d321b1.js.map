{"version":3,"file":"component---src-pages-glossary-tsx-034bcac30b1344d321b1.js","mappings":"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","sources":["webpack://landing/./src/components/common/Icons/DropdownArrowIcon/DropdownArrowIcon.tsx","webpack://landing/./src/components/common/Form/index.tsx","webpack://landing/./src/components/common/Form/styled.ts","webpack://landing/./src/components/glossary/styled.ts","webpack://landing/./src/hooks/useOnKeyDown.tsx","webpack://landing/./src/pages/glossary.tsx"],"sourcesContent":["import React from \"react\";\nimport { colors } from \"../../../../utils/colors\";\n\nconst DropdownArrowIcon = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"14\"\n      height=\"8\"\n      viewBox=\"0 0 14 8\"\n      fill=\"none\"\n    >\n      <path\n        d=\"M7.88787 7.53749L13.1879 2.23749C13.305 2.12129 13.398 1.98303 13.4615 1.83071C13.5249 1.67839 13.5576 1.515 13.5576 1.34999C13.5576 1.18497 13.5249 1.02159 13.4615 0.869269C13.398 0.716945 13.305 0.578693 13.1879 0.46249C12.9537 0.229676 12.6369 0.098999 12.3066 0.098999C11.9764 0.098999 11.6596 0.229676 11.4254 0.46249L7.00037 4.88749L2.57537 0.462489C2.34117 0.229675 2.02435 0.0989985 1.69412 0.0989985C1.36389 0.0989985 1.04707 0.229675 0.812868 0.462489C0.697017 0.579289 0.605361 0.717809 0.543156 0.870106C0.480949 1.0224 0.449419 1.18548 0.45037 1.34999C0.449419 1.5145 0.480949 1.67758 0.543156 1.82987C0.605361 1.98217 0.697017 2.12069 0.812868 2.23749L6.11287 7.53749C6.22907 7.65465 6.36732 7.74764 6.51965 7.8111C6.67197 7.87456 6.83535 7.90724 7.00037 7.90724C7.16538 7.90724 7.32877 7.87456 7.48109 7.8111C7.63341 7.74764 7.77167 7.65465 7.88787 7.53749Z\"\n        fill={colors.secondary.gray700}\n      />\n    </svg>\n  );\n};\n\nexport default DropdownArrowIcon;\n","import React, { InputHTMLAttributes, SelectHTMLAttributes } from \"react\";\nimport { FC } from \"react\";\nimport DropdownArrowIcon from \"../Icons/DropdownArrowIcon/DropdownArrowIcon\";\nimport { StyledDropdown, StyledDropdownInput, StyledTextInput } from \"./styled\";\n\nexport const DropdownInput:FC<SelectHTMLAttributes<{}>> = ({children, ...props}) => {\n    return (<StyledDropdown>\n        <StyledDropdownInput {...props}>\n            {children}\n        </StyledDropdownInput>\n        <DropdownArrowIcon></DropdownArrowIcon>\n    </StyledDropdown>)\n}\n\nexport const TextInput:FC<InputHTMLAttributes<{}>> = ({...props}) => {\n    return (\n       <StyledTextInput {...props}></StyledTextInput>\n    )\n  }\n  ","import styled from 'styled-components';\nimport { colors } from '../../../utils/colors';\n\nexport const StyledDropdown = styled.div`\n  position: relative;\n  svg {\n    position: absolute;\n    top: 15px;\n    right: 10px;\n  }\n`;\n\nexport const StyledDropdownInput = styled.select`\n  height: 36px;\n  padding: 0 15px;\n  cursor: pointer;\n  appearance: none;\n  option {\n    font-family: 'Rubik';\n    color: ${colors.primary.black};\n    background-color: none;\n  }\n  width: 100%;\n  box-sizing: border-box;\n  background-color: ${colors.primary.white};\n  color: ${colors.primary.black};\n  border: 1px solid ${colors.secondary.gray300};\n  font-family: 'Rubik';\n  border-radius: 5px;\n  &::placeholder {\n    color: ${colors.primary.gray500};\n    font-family: 'Rubik';\n  }\n  &:focus {\n    outline: none;\n    border: 1px solid ${colors.primary.blue};\n  }\n`;\n\nexport const StyledTextInput = styled.input`\n  width: 100%;\n  box-sizing: border-box;\n  background-color: ${colors.primary.white};\n  color: ${colors.primary.black};\n  border: 1px solid ${colors.secondary.gray300};\n  font-family: 'Rubik';\n  border-radius: 5px;\n  &::placeholder {\n    color: ${colors.primary.gray500};\n    font-family: 'Rubik';\n  }\n  height: 36px;\n  padding: 10px 15px;\n  &:focus {\n    outline: none;\n    border: 1px solid ${colors.primary.blue};\n  }\n`;\n","import styled, { css } from 'styled-components';\nimport { colors } from '../../utils/colors';\nimport { device } from '../../utils/layoutBreakpoints';\nimport { Container } from '../common/Container/Container';\nimport { StyledTextInput } from '../common/Form/styled';\n\nexport const GlossaryPageContentContainer = styled(Container)`\n  max-width: 1000px;\n`;\n\nexport const HeroSection = styled.section`\n  background-color: ${colors.secondary.gray100};\n  box-sizing: border-box;\n  padding: 40px 20px;\n\n  @media ${device.laptop} {\n    height: 400px;\n    padding-top: 80px;\n    padding-bottom: 80px;\n  }\n\n  ${GlossaryPageContentContainer} {\n    display: flex;\n    flex-direction: column;\n    gap: 30px;\n  }\n`;\n\nexport const HeroInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  @media ${device.laptop} {\n    gap: 30px;\n  }\n`;\n\nexport const SearchIconContainer = styled.div`\n  position: absolute;\n  left: 20px;\n  top: calc(50% - 10px);\n`;\n\nexport const SearchButton = styled.button`\n  cursor: pointer;\n  position: absolute;\n  right: 10px;\n  top: calc(50% - 10px);\n  border: none;\n  background: none;\n  span {\n    color: ${colors.primary.blue};\n    font-weight: 600;\n  }\n  &:hover {\n    span {\n      color: ${colors.primary.lightOrange};\n    }\n  }\n`;\n\nexport const SearchContainer = styled.div`\n  position: relative;\n\n  svg {\n    width: 13px;\n    height: 13px;\n  }\n\n  ${StyledTextInput} {\n    padding-left: 40px;\n    padding-right: 80px;\n    height: 45px;\n    border-radius: 8px;\n    font-size: 12px;\n    &::placeholder {\n      color: ${colors.primary.gray500};\n      font-size: 0.9rem;\n    }\n    @media ${device.laptop} {\n      height: 60px;\n      padding-left: 50px;\n      font-size: 16px;\n    }\n  }\n\n  @media ${device.laptop} {\n    svg {\n      width: 20px;\n      height: 20px;\n    }\n  }\n`;\n\nexport const Alphabet = styled.div`\n  padding: 50px 0;\n  display: none;\n  width: 100%;\n  flex-wrap: wrap;\n  gap: 10px;\n  justify-content: center;\n  @media ${device.mobileL} {\n    justify-content: unset;\n  }\n  @media ${device.tablet} {\n    justify-content: space-between;\n  }\n  a {\n    h2 {\n      transition: 0.5s;\n      &:hover {\n        color: ${colors.secondary.orange};\n        transition: 0.5s;\n      }\n    }\n  }\n  @media ${device.laptop} {\n    display: flex;\n  }\n`;\n\nexport const TermsGroup = styled.div`\n  border-top: 1px solid ${colors.secondary.gray300};\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  padding: 30px 0;\n  @media ${device.tablet} {\n    padding: 60px 0;\n  }\n`;\n\nexport const TermsContainer = styled.div`\n  ${TermsGroup}:first-child {\n    border-top: none;\n  }\n  @media ${device.laptop} {\n    ${TermsGroup}:first-child {\n      border-top: 1px solid ${colors.secondary.gray300};\n    }\n  }\n`;\n\nexport const TermFirstLetter = styled.div``;\n\nexport const TermsList = styled.div<{ termsAmount: number }>`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  @media ${device.tablet} {\n    display: grid;\n    gap: 20px;\n  }\n  ${(props) =>\n    props.termsAmount > 2 &&\n    css`\n      a:nth-child(2) {\n        grid-column-start: 2;\n      }\n    `}\n  a > span {\n    transition: 0.5s;\n    &:hover {\n      color: ${colors.secondary.orange};\n      transition: 0.5s;\n    }\n  }\n`;\n","import { useCallback, useEffect } from 'react';\n\nconst useOnKeyDown = (\n  keyCode: string,\n  callback: () => void,\n  condition: boolean,\n) => {\n  const keyFunction = useCallback((event : KeyboardEvent) => {\n    if (event.code === keyCode) {\n      callback();\n    }\n  }, [callback]);\n\n  useEffect(() => {\n    if (condition) {\n      document.addEventListener('keydown', keyFunction);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', keyFunction);\n    };\n  }, [keyFunction, condition]);\n};\n\nexport const useOnEnterDown = (\n  callback: () => void,\n  condition = true,\n) => useOnKeyDown('Enter', callback, condition);","import React, { useEffect, useState } from 'react';\nimport Layout from '../components/common/Layout/Layout';\nimport { graphql, Link, PageProps } from 'gatsby';\nimport { mapTermNodeToGlossaryTerm } from '../mappers';\nimport { useLunr } from 'react-lunr';\nimport { GlossaryTerm } from '../types';\nimport {\n  GatsbySeoComponent,\n  MetaData,\n  TopLevelPageJSONLDSchemas,\n} from '../components/common/SEO';\nimport { Text } from '../components/common/Text';\nimport {\n  Alphabet,\n  GlossaryPageContentContainer,\n  HeroInfo,\n  HeroSection,\n  SearchButton,\n  SearchContainer,\n  SearchIconContainer,\n  TermFirstLetter,\n  TermsContainer,\n  TermsGroup,\n  TermsList,\n} from '../components/glossary/styled';\nimport { TextInput } from '../components/common/Form';\nimport SearchIcon from '../components/common/Icons/SearchIcon/SearchIcon';\nimport { NoResultsText } from '../components/common/styled';\nimport { useOnEnterDown } from '../hooks/useOnKeyDown';\n\nconst termsByAlphabetTemplate = JSON.stringify({\n  A: [],\n  B: [],\n  C: [],\n  D: [],\n  E: [],\n  F: [],\n  G: [],\n  H: [],\n  I: [],\n  J: [],\n  K: [],\n  L: [],\n  M: [],\n  N: [],\n  O: [],\n  P: [],\n  Q: [],\n  R: [],\n  S: [],\n  T: [],\n  U: [],\n  V: [],\n  W: [],\n  X: [],\n  Y: [],\n  Z: [],\n  '#': [],\n});\n\nconst GlossaryPage = ({ data }: PageProps<Queries.GlossaryPageQuery>) => {\n  const [tempSearchString, setTempSearchString] = useState('');\n  const [searchString, setSearchString] = useState<string>('');\n\n  const rawTerms: GlossaryTerm[] = React.useMemo(() => {\n    return data.allMdx.edges.map((edge) => mapTermNodeToGlossaryTerm(edge.node));\n  }, []);\n\n  const filteredTerms: GlossaryTerm[] = useLunr(\n    searchString.trim(),\n    data.localSearchTerms?.index,\n    data.localSearchTerms?.store,\n  ) as GlossaryTerm[];\n\n  const terms = searchString ? filteredTerms : rawTerms;\n\n  const getTermsForRender = () => {\n    const newState = { ...JSON.parse(termsByAlphabetTemplate) };\n    terms.forEach((term) => {\n      const firstLetter = term.title[0].toUpperCase();\n      if (newState[firstLetter as string]) {\n        newState[firstLetter as string]?.push(term);\n      } else {\n        newState['#'].push(term);\n      }\n    });\n    return newState;\n  };\n\n  const [termsByAlphabet, setTermsByAlphabet] = useState<Record<string, GlossaryTerm[]>>(\n    getTermsForRender(),\n  );\n\n  useEffect(() => {\n    setTermsByAlphabet(getTermsForRender());\n  }, [terms]);\n\n  const onSearchClick = () => {\n    setSearchString(tempSearchString);\n  };\n\n  useOnEnterDown(onSearchClick);\n\n  useEffect(() => {\n    if (!tempSearchString) {\n      setSearchString('');\n    }\n  }, [tempSearchString]);\n\n  return (\n    <>\n      <MetaData\n        title=\"Glossary | Telgorithm\"\n        description=\"Browse through our glossary for definitions to common terms in the A2P text messaging space.\"\n      />\n      <TopLevelPageJSONLDSchemas url=\"https://www.telgorithm.com/glossary/\" />\n      <GatsbySeoComponent canonicalUrl=\"https://www.telgorithm.com/glossary/\" />\n      <Layout disabledContainer>\n        <HeroSection>\n          <GlossaryPageContentContainer>\n            <HeroInfo>\n              <Text.Title.Bold.xl>Telgorithm’s Glossary</Text.Title.Bold.xl>\n              <Text.Regular.Bold.lg>\n                Browse through our glossary for definitions to common terms in the A2P\n                text messaging space.\n              </Text.Regular.Bold.lg>\n            </HeroInfo>\n            <SearchContainer>\n              <SearchIconContainer>\n                <SearchIcon></SearchIcon>\n              </SearchIconContainer>\n              <TextInput\n                value={tempSearchString}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setTempSearchString(e.currentTarget.value)\n                }\n              ></TextInput>\n              <SearchButton onClick={onSearchClick}>\n                <Text.Regular.Normal.sm>Search</Text.Regular.Normal.sm>\n              </SearchButton>\n            </SearchContainer>\n          </GlossaryPageContentContainer>\n        </HeroSection>\n        <GlossaryPageContentContainer>\n          <Alphabet>\n            {Object.keys(termsByAlphabet).map((letter) =>\n              termsByAlphabet[letter].length > 0 ? (\n                <Link to={`#terms_${letter}`} key={letter}>\n                  <Text.Title.Bold.md key={letter}>{letter}</Text.Title.Bold.md>\n                </Link>\n              ) : (\n                <Text.Title.Bold.md key={letter}>{letter}</Text.Title.Bold.md>\n              ),\n            )}\n          </Alphabet>\n          {terms.length ? (\n            <TermsContainer>\n              {Object.keys(termsByAlphabet)\n                .filter((letter) => termsByAlphabet[letter].length)\n                .map((letter) => (\n                  <TermsGroup key={letter} id={`terms_${letter}`}>\n                    <TermFirstLetter>\n                      <Text.Title.Bold.md>{letter}</Text.Title.Bold.md>\n                    </TermFirstLetter>\n                    <TermsList termsAmount={termsByAlphabet[letter].length}>\n                      {termsByAlphabet[letter].map((item) => (\n                        <Link to={item.url} key={item.id}>\n                          <Text.Regular.Normal.md>{item.title}</Text.Regular.Normal.md>\n                        </Link>\n                      ))}\n                    </TermsList>\n                  </TermsGroup>\n                ))}\n            </TermsContainer>\n          ) : (\n            <NoResultsText>No results for \"{searchString}\"</NoResultsText>\n          )}\n        </GlossaryPageContentContainer>\n      </Layout>\n    </>\n  );\n};\n\nexport default GlossaryPage;\n\nexport const query = graphql`\n  query GlossaryPage {\n    localSearchTerms {\n      index\n      store\n    }\n    allMdx(\n      filter: { internal: { contentFilePath: { regex: \"//terms//\" } } }\n      sort: {frontmatter: {title: ASC}}\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n          }\n          id\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["DropdownArrowIcon","React","xmlns","width","height","viewBox","fill","d","colors","DropdownInput","_ref","children","props","StyledDropdown","StyledDropdownInput","TextInput","_ref2","StyledTextInput","styled","displayName","componentId","GlossaryPageContentContainer","Container","withConfig","HeroSection","device","HeroInfo","SearchIconContainer","SearchButton","SearchContainer","Alphabet","TermsGroup","TermsContainer","TermFirstLetter","TermsList","termsAmount","css","useOnEnterDown","callback","condition","useOnKeyDown","keyCode","keyFunction","useCallback","event","code","useEffect","document","addEventListener","removeEventListener","termsByAlphabetTemplate","JSON","stringify","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","_data$localSearchTerm","_data$localSearchTerm2","data","tempSearchString","setTempSearchString","useState","searchString","setSearchString","rawTerms","allMdx","edges","map","edge","mapTermNodeToGlossaryTerm","node","filteredTerms","useLunr","trim","localSearchTerms","index","store","terms","getTermsForRender","newState","parse","forEach","term","firstLetter","title","toUpperCase","_newState","push","termsByAlphabet","setTermsByAlphabet","onSearchClick","MetaData","description","TopLevelPageJSONLDSchemas","url","GatsbySeoComponent","canonicalUrl","Layout","disabledContainer","Text","SearchIcon","value","onChange","e","currentTarget","onClick","Object","keys","letter","length","Link","to","key","filter","id","item","NoResultsText"],"sourceRoot":""}