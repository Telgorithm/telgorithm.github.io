{"version":3,"file":"component---src-pages-glossary-tsx-58ee9c1c5640c2808947.js","mappings":"4TAMO,MAAMA,GAA+BC,EAAAA,EAAAA,SAAOC,EAAAA,GAAUC,WAAA,CAAAC,YAAA,uCAAAC,YAAA,eAAjBJ,CAAiB,uBAIhDK,EAAcL,EAAAA,QAAAA,QAAAA,WAAc,CAAAG,YAAA,sBAAAC,YAAA,eAAdJ,CAAc,iLACnBM,EAAAA,EAAAA,UAAAA,QAIXC,EAAAA,EAAAA,OAMPR,GAOSS,EAAWR,EAAAA,QAAAA,IAAAA,WAAU,CAAAG,YAAA,mBAAAC,YAAA,eAAVJ,CAAU,sEAIvBO,EAAAA,EAAAA,QAKEE,EAAsBT,EAAAA,QAAAA,IAAAA,WAAU,CAAAG,YAAA,8BAAAC,YAAA,eAAVJ,CAAU,uDAMhCU,EAAeV,EAAAA,QAAAA,OAAAA,WAAa,CAAAG,YAAA,uBAAAC,YAAA,eAAbJ,CAAa,2JAQ5BM,EAAAA,EAAAA,QAAAA,KAKEA,EAAAA,EAAAA,QAAAA,aAKFK,EAAkBX,EAAAA,QAAAA,IAAAA,WAAU,CAAAG,YAAA,0BAAAC,YAAA,eAAVJ,CAAU,sRAQrCY,EAAAA,GAOWN,EAAAA,EAAAA,QAAAA,QAGFC,EAAAA,EAAAA,OAOFA,EAAAA,EAAAA,QAQEM,EAAWb,EAAAA,QAAAA,IAAAA,WAAU,CAAAG,YAAA,mBAAAC,YAAA,eAAVJ,CAAU,0PAOvBO,EAAAA,EAAAA,QAGAA,EAAAA,EAAAA,OAOMD,EAAAA,EAAAA,UAAAA,OAKNC,EAAAA,EAAAA,QAKEO,EAAad,EAAAA,QAAAA,IAAAA,WAAU,CAAAG,YAAA,qBAAAC,YAAA,eAAVJ,CAAU,oHACVM,EAAAA,EAAAA,UAAAA,QAKfC,EAAAA,EAAAA,QAKEQ,EAAiBf,EAAAA,QAAAA,IAAAA,WAAU,CAAAG,YAAA,yBAAAC,YAAA,eAAVJ,CAAU,4FACpCc,EAGOP,EAAAA,EAAAA,OACLO,EACwBR,EAAAA,EAAAA,UAAAA,SAKjBU,EAAkBhB,EAAAA,QAAAA,IAAAA,WAAU,CAAAG,YAAA,0BAAAC,YAAA,eAAVJ,CAAU,MAE5BiB,EAAYjB,EAAAA,QAAAA,IAAAA,WAAU,CAAAG,YAAA,oBAAAC,YAAA,gBAAVJ,CAAU,oJAIxBO,EAAAA,EAAAA,QAINW,GACDA,EAAMC,YAAc,IACpBC,EAAAA,EAAAA,KAAG,2CAQQd,EAAAA,EAAAA,UAAAA,Q,oCCjKf,MAsBae,EAAiB,SAC5BC,EACAC,GAAgB,YAAP,IAATA,IAAAA,GAAY,GAxBOC,EACnBC,EACAH,EACAC,KAEA,MAAMG,GAAcC,EAAAA,EAAAA,cAAaC,IAC3BA,EAAMC,OAASJ,GACjBH,GACF,GACC,CAACA,KAEJQ,EAAAA,EAAAA,YAAU,KACJP,GACFQ,SAASC,iBAAiB,UAAWN,GAGhC,KACLK,SAASE,oBAAoB,UAAWP,EAAY,IAErD,CAACA,EAAaH,GAAW,EAMzBC,CAAa,QAASF,EAAUC,EAAW,ECI1CW,EAA0BC,KAAKC,UAAU,CAC7CC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACH,IAAK,KA+HP,MA5HqBC,IAAoD,IAAAC,EAAAC,EAAA,IAAnD,KAAEC,GAA4CH,EAClE,MAAM,EAACI,EAAgB,EAAEC,IAAuBC,EAAAA,EAAAA,UAAS,KACnD,EAACC,EAAY,EAAEC,IAAmBF,EAAAA,EAAAA,UAAiB,IAEnDG,EAA2BC,EAAAA,SAAc,IACtCP,EAAKQ,OAAOC,MAAMC,KAAKC,IAASC,EAAAA,EAAAA,IAA0BD,EAAKE,SACrE,IAEGC,GAAgCC,EAAAA,EAAAA,GACpCX,EAAaY,OACQ,QADFlB,EACnBE,EAAKiB,wBAAgB,IAAAnB,OAAA,EAArBA,EAAuBoB,MACF,QADOnB,EAC5BC,EAAKiB,wBAAgB,IAAAlB,OAAA,EAArBA,EAAuBoB,OAGnBC,EAAQhB,EAAeU,EAAgBR,EAEvCe,EAAoBA,KACxB,MAAMC,EAAW,IAAKrD,KAAKsD,MAAMvD,IASjC,OARAoD,EAAMI,SAASC,IACb,MAAMC,EAAcD,EAAKE,MAAM,GAAGC,cACG,IAAAC,EAAjCP,EAASI,GACoB,QAA/BG,EAAAP,EAASI,UAAsB,IAAAG,GAA/BA,EAAiCC,KAAKL,GAEtCH,EAAS,KAAKQ,KAAKL,EACrB,IAEKH,CAAQ,GAGX,EAACS,EAAe,EAAEC,IAAsB7B,EAAAA,EAAAA,UAC5CkB,MAGFzD,EAAAA,EAAAA,YAAU,KACRoE,EAAmBX,IAAoB,GACtC,CAACD,IAEJ,MAAMa,EAAgBA,KACpB5B,EAAgBJ,EAAiB,EAWnC,OARA9C,EAAe8E,IAEfrE,EAAAA,EAAAA,YAAU,KACHqC,GACHI,EAAgB,GAClB,GACC,CAACJ,IAGFM,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC2B,EAAAA,GAAQ,CACPC,UAAU,wBACVR,MAAM,kEACNS,YAAY,iGAEd7B,EAAAA,cAAC8B,EAAAA,GAAyB,CAACC,IAAI,yCAC/B/B,EAAAA,cAACgC,EAAAA,GAAkB,CAACC,aAAa,yCACjCjC,EAAAA,cAACkC,EAAAA,EAAM,CAACC,mBAAiB,GACvBnC,EAAAA,cAACpE,EAAW,KACVoE,EAAAA,cAAC1E,EAA4B,KAC3B0E,EAAAA,cAACjE,EAAQ,KACPiE,EAAAA,cAACoC,EAAAA,GAAAA,MAAAA,KAAAA,GAAkB,KAAC,yBACpBpC,EAAAA,cAACoC,EAAAA,GAAAA,QAAAA,KAAAA,GAAoB,KAAC,iGAKxBpC,EAAAA,cAAC9D,EAAe,KACd8D,EAAAA,cAAChE,EAAmB,KAClBgE,EAAAA,cAACqC,EAAAA,EAAU,OAEbrC,EAAAA,cAACsC,EAAAA,EAAS,CACRC,MAAO7C,EACP8C,SAAWC,GACT9C,EAAoB8C,EAAEC,cAAcH,SAGxCvC,EAAAA,cAAC/D,EAAY,CAAC0G,QAASjB,GACrB1B,EAAAA,cAACoC,EAAAA,GAAAA,QAAAA,OAAAA,GAAsB,KAAC,cAKhCpC,EAAAA,cAAC1E,EAA4B,KAC3B0E,EAAAA,cAAC5D,EAAQ,KACNwG,OAAOC,KAAKrB,GAAiBrB,KAAK2C,GACjCtB,EAAgBsB,GAAQC,OAAS,EAC/B/C,EAAAA,cAACgD,EAAAA,KAAI,CAACC,GAAE,UAAYH,EAAUI,IAAKJ,GACjC9C,EAAAA,cAACoC,EAAAA,GAAAA,MAAAA,KAAAA,GAAkB,CAACc,IAAKJ,GAASA,IAGpC9C,EAAAA,cAACoC,EAAAA,GAAAA,MAAAA,KAAAA,GAAkB,CAACc,IAAKJ,GAASA,MAIvCjC,EAAMkC,OACL/C,EAAAA,cAAC1D,EAAc,KACZsG,OAAOC,KAAKrB,GACV2B,QAAQL,GAAWtB,EAAgBsB,GAAQC,SAC3C5C,KAAK2C,GACJ9C,EAAAA,cAAC3D,EAAU,CAAC6G,IAAKJ,EAAQM,GAAE,SAAWN,GACpC9C,EAAAA,cAACzD,EAAe,KACdyD,EAAAA,cAACoC,EAAAA,GAAAA,MAAAA,KAAAA,GAAkB,KAAEU,IAEvB9C,EAAAA,cAACxD,EAAS,CAACE,YAAa8E,EAAgBsB,GAAQC,QAC7CvB,EAAgBsB,GAAQ3C,KAAKkD,GAC5BrD,EAAAA,cAACgD,EAAAA,KAAI,CAACC,GAAII,EAAKtB,IAAKmB,IAAKG,EAAKD,IAC5BpD,EAAAA,cAACoC,EAAAA,GAAAA,QAAAA,OAAAA,GAAsB,KAAEiB,EAAKjC,eAQ5CpB,EAAAA,cAACsD,EAAAA,GAAa,KAAC,mBAAiBzD,EAAa,OAIlD,EAMA,MAyBM0D,EAAqC,CAChDnC,MAAO,wBACPoC,UAAW,QACXC,QAAS,kKACTC,KAAM,a","sources":["webpack://landing/./src/components/glossary/styled.ts","webpack://landing/./src/hooks/useOnKeyDown.tsx","webpack://landing/./src/pages/glossary.tsx"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { colors } from '../../utils/colors';\nimport { device } from '../../utils/layoutBreakpoints';\nimport { Container } from '../common/Container/Container';\nimport { StyledTextInput } from '../common/Form/styled';\n\nexport const GlossaryPageContentContainer = styled(Container)`\n  max-width: 1000px;\n`;\n\nexport const HeroSection = styled.section`\n  background-color: ${colors.secondary.gray100};\n  box-sizing: border-box;\n  padding: 40px 20px;\n\n  @media ${device.laptop} {\n    height: 400px;\n    padding-top: 80px;\n    padding-bottom: 80px;\n  }\n\n  ${GlossaryPageContentContainer} {\n    display: flex;\n    flex-direction: column;\n    gap: 30px;\n  }\n`;\n\nexport const HeroInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  @media ${device.laptop} {\n    gap: 30px;\n  }\n`;\n\nexport const SearchIconContainer = styled.div`\n  position: absolute;\n  left: 20px;\n  top: calc(50% - 10px);\n`;\n\nexport const SearchButton = styled.button`\n  cursor: pointer;\n  position: absolute;\n  right: 10px;\n  top: calc(50% - 10px);\n  border: none;\n  background: none;\n  span {\n    color: ${colors.primary.blue};\n    font-weight: 600;\n  }\n  &:hover {\n    span {\n      color: ${colors.primary.lightOrange};\n    }\n  }\n`;\n\nexport const SearchContainer = styled.div`\n  position: relative;\n\n  svg {\n    width: 13px;\n    height: 13px;\n  }\n\n  ${StyledTextInput} {\n    padding-left: 40px;\n    padding-right: 80px;\n    height: 45px;\n    border-radius: 8px;\n    font-size: 12px;\n    &::placeholder {\n      color: ${colors.primary.gray500};\n      font-size: 0.9rem;\n    }\n    @media ${device.laptop} {\n      height: 60px;\n      padding-left: 50px;\n      font-size: 16px;\n    }\n  }\n\n  @media ${device.laptop} {\n    svg {\n      width: 20px;\n      height: 20px;\n    }\n  }\n`;\n\nexport const Alphabet = styled.div`\n  padding: 50px 0;\n  display: none;\n  width: 100%;\n  flex-wrap: wrap;\n  gap: 10px;\n  justify-content: center;\n  @media ${device.mobileL} {\n    justify-content: unset;\n  }\n  @media ${device.tablet} {\n    justify-content: space-between;\n  }\n  a {\n    h2 {\n      transition: 0.5s;\n      &:hover {\n        color: ${colors.secondary.orange};\n        transition: 0.5s;\n      }\n    }\n  }\n  @media ${device.laptop} {\n    display: flex;\n  }\n`;\n\nexport const TermsGroup = styled.div`\n  border-top: 1px solid ${colors.secondary.gray300};\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  padding: 30px 0;\n  @media ${device.tablet} {\n    padding: 60px 0;\n  }\n`;\n\nexport const TermsContainer = styled.div`\n  ${TermsGroup}:first-child {\n    border-top: none;\n  }\n  @media ${device.laptop} {\n    ${TermsGroup}:first-child {\n      border-top: 1px solid ${colors.secondary.gray300};\n    }\n  }\n`;\n\nexport const TermFirstLetter = styled.div``;\n\nexport const TermsList = styled.div<{ termsAmount: number }>`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  @media ${device.tablet} {\n    display: grid;\n    gap: 20px;\n  }\n  ${(props) =>\n    props.termsAmount > 2 &&\n    css`\n      a:nth-child(2) {\n        grid-column-start: 2;\n      }\n    `}\n  a > span {\n    transition: 0.5s;\n    &:hover {\n      color: ${colors.secondary.orange};\n      transition: 0.5s;\n    }\n  }\n`;\n","import { useCallback, useEffect } from 'react';\n\nconst useOnKeyDown = (\n  keyCode: string,\n  callback: () => void,\n  condition: boolean,\n) => {\n  const keyFunction = useCallback((event : KeyboardEvent) => {\n    if (event.code === keyCode) {\n      callback();\n    }\n  }, [callback]);\n\n  useEffect(() => {\n    if (condition) {\n      document.addEventListener('keydown', keyFunction);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', keyFunction);\n    };\n  }, [keyFunction, condition]);\n};\n\nexport const useOnEnterDown = (\n  callback: () => void,\n  condition = true,\n) => useOnKeyDown('Enter', callback, condition);","import React, { useEffect, useState } from 'react';\nimport Layout from '../components/common/Layout/Layout';\nimport { graphql, Link, PageProps } from 'gatsby';\nimport { mapTermNodeToGlossaryTerm } from '../mappers';\nimport { useLunr } from 'react-lunr';\nimport { GlossaryTerm } from '../types';\nimport {\n  GatsbySeoComponent,\n  MetaData,\n  TopLevelPageJSONLDSchemas,\n} from '../components/common/SEO';\nimport { Text } from '../components/common/Text';\nimport {\n  Alphabet,\n  GlossaryPageContentContainer,\n  HeroInfo,\n  HeroSection,\n  SearchButton,\n  SearchContainer,\n  SearchIconContainer,\n  TermFirstLetter,\n  TermsContainer,\n  TermsGroup,\n  TermsList,\n} from '../components/glossary/styled';\nimport { TextInput } from '../components/common/Form';\nimport SearchIcon from '../components/common/Icons/SearchIcon/SearchIcon';\nimport { NoResultsText } from '../components/common/styled';\nimport { useOnEnterDown } from '../hooks/useOnKeyDown';\nimport { StaticPageFrontmatter } from '../types/StaticPageFrontmatter';\n\nconst termsByAlphabetTemplate = JSON.stringify({\n  A: [],\n  B: [],\n  C: [],\n  D: [],\n  E: [],\n  F: [],\n  G: [],\n  H: [],\n  I: [],\n  J: [],\n  K: [],\n  L: [],\n  M: [],\n  N: [],\n  O: [],\n  P: [],\n  Q: [],\n  R: [],\n  S: [],\n  T: [],\n  U: [],\n  V: [],\n  W: [],\n  X: [],\n  Y: [],\n  Z: [],\n  '#': [],\n});\n\nconst GlossaryPage = ({ data }: PageProps<Queries.GlossaryPageQuery>) => {\n  const [tempSearchString, setTempSearchString] = useState('');\n  const [searchString, setSearchString] = useState<string>('');\n\n  const rawTerms: GlossaryTerm[] = React.useMemo(() => {\n    return data.allMdx.edges.map((edge) => mapTermNodeToGlossaryTerm(edge.node));\n  }, []);\n\n  const filteredTerms: GlossaryTerm[] = useLunr(\n    searchString.trim(),\n    data.localSearchTerms?.index,\n    data.localSearchTerms?.store,\n  ) as GlossaryTerm[];\n\n  const terms = searchString ? filteredTerms : rawTerms;\n\n  const getTermsForRender = () => {\n    const newState = { ...JSON.parse(termsByAlphabetTemplate) };\n    terms.forEach((term) => {\n      const firstLetter = term.title[0].toUpperCase();\n      if (newState[firstLetter as string]) {\n        newState[firstLetter as string]?.push(term);\n      } else {\n        newState['#'].push(term);\n      }\n    });\n    return newState;\n  };\n\n  const [termsByAlphabet, setTermsByAlphabet] = useState<Record<string, GlossaryTerm[]>>(\n    getTermsForRender(),\n  );\n\n  useEffect(() => {\n    setTermsByAlphabet(getTermsForRender());\n  }, [terms]);\n\n  const onSearchClick = () => {\n    setSearchString(tempSearchString);\n  };\n\n  useOnEnterDown(onSearchClick);\n\n  useEffect(() => {\n    if (!tempSearchString) {\n      setSearchString('');\n    }\n  }, [tempSearchString]);\n\n  return (\n    <>\n      <MetaData\n        pageTitle=\"Glossary | Telgorithm\"\n        title='A2P Text Messaging Terms & Glossary of Definitions | Telgorithm'\n        description=\"Browse through our glossary for definitions to common terms in the A2P text messaging space.\"\n      />\n      <TopLevelPageJSONLDSchemas url=\"https://www.telgorithm.com/glossary/\" />\n      <GatsbySeoComponent canonicalUrl=\"https://www.telgorithm.com/glossary/\" />\n      <Layout disabledContainer>\n        <HeroSection>\n          <GlossaryPageContentContainer>\n            <HeroInfo>\n              <Text.Title.Bold.xl>Telgorithm’s Glossary</Text.Title.Bold.xl>\n              <Text.Regular.Bold.lg>\n                Browse through our glossary for definitions to common terms in the A2P\n                text messaging space.\n              </Text.Regular.Bold.lg>\n            </HeroInfo>\n            <SearchContainer>\n              <SearchIconContainer>\n                <SearchIcon></SearchIcon>\n              </SearchIconContainer>\n              <TextInput\n                value={tempSearchString}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setTempSearchString(e.currentTarget.value)\n                }\n              ></TextInput>\n              <SearchButton onClick={onSearchClick}>\n                <Text.Regular.Normal.xs>Search</Text.Regular.Normal.xs>\n              </SearchButton>\n            </SearchContainer>\n          </GlossaryPageContentContainer>\n        </HeroSection>\n        <GlossaryPageContentContainer>\n          <Alphabet>\n            {Object.keys(termsByAlphabet).map((letter) =>\n              termsByAlphabet[letter].length > 0 ? (\n                <Link to={`#terms_${letter}`} key={letter}>\n                  <Text.Title.Bold.md key={letter}>{letter}</Text.Title.Bold.md>\n                </Link>\n              ) : (\n                <Text.Title.Bold.md key={letter}>{letter}</Text.Title.Bold.md>\n              ),\n            )}\n          </Alphabet>\n          {terms.length ? (\n            <TermsContainer>\n              {Object.keys(termsByAlphabet)\n                .filter((letter) => termsByAlphabet[letter].length)\n                .map((letter) => (\n                  <TermsGroup key={letter} id={`terms_${letter}`}>\n                    <TermFirstLetter>\n                      <Text.Title.Bold.md>{letter}</Text.Title.Bold.md>\n                    </TermFirstLetter>\n                    <TermsList termsAmount={termsByAlphabet[letter].length}>\n                      {termsByAlphabet[letter].map((item) => (\n                        <Link to={item.url} key={item.id}>\n                          <Text.Regular.Normal.md>{item.title}</Text.Regular.Normal.md>\n                        </Link>\n                      ))}\n                    </TermsList>\n                  </TermsGroup>\n                ))}\n            </TermsContainer>\n          ) : (\n            <NoResultsText>No results for \"{searchString}\"</NoResultsText>\n          )}\n        </GlossaryPageContentContainer>\n      </Layout>\n    </>\n  );\n};\n\nexport default GlossaryPage;\n\nexport const query = graphql`\n  query GlossaryPage {\n    localSearchTerms {\n      index\n      store\n    }\n    allMdx(\n      filter: { internal: { contentFilePath: { regex: \"//terms//\" } } }\n      sort: {frontmatter: {title: ASC}}\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n          }\n          id\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const frontmatter: StaticPageFrontmatter = {\n  title: \"Telgorithm’s Glossary\",\n  metaTitle: \"Terms\",\n  excerpt: \"Stay up to date on the latest news in A2P SMS and 10DLC and learn what it takes to provide the next level of business messaging experiences for your customers.\",\n  slug: '/glossary/',\n};\n"],"names":["GlossaryPageContentContainer","styled","Container","withConfig","displayName","componentId","HeroSection","colors","device","HeroInfo","SearchIconContainer","SearchButton","SearchContainer","StyledTextInput","Alphabet","TermsGroup","TermsContainer","TermFirstLetter","TermsList","props","termsAmount","css","useOnEnterDown","callback","condition","useOnKeyDown","keyCode","keyFunction","useCallback","event","code","useEffect","document","addEventListener","removeEventListener","termsByAlphabetTemplate","JSON","stringify","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","_ref","_data$localSearchTerm","_data$localSearchTerm2","data","tempSearchString","setTempSearchString","useState","searchString","setSearchString","rawTerms","React","allMdx","edges","map","edge","mapTermNodeToGlossaryTerm","node","filteredTerms","useLunr","trim","localSearchTerms","index","store","terms","getTermsForRender","newState","parse","forEach","term","firstLetter","title","toUpperCase","_newState","push","termsByAlphabet","setTermsByAlphabet","onSearchClick","MetaData","pageTitle","description","TopLevelPageJSONLDSchemas","url","GatsbySeoComponent","canonicalUrl","Layout","disabledContainer","Text","SearchIcon","TextInput","value","onChange","e","currentTarget","onClick","Object","keys","letter","length","Link","to","key","filter","id","item","NoResultsText","frontmatter","metaTitle","excerpt","slug"],"sourceRoot":""}