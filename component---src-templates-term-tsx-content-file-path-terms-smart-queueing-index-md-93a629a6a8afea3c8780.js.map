{"version":3,"file":"component---src-templates-term-tsx-content-file-path-terms-smart-queueing-index-md-93a629a6a8afea3c8780.js","mappings":"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","sources":["webpack://landing/./terms/smart-queueing/index.md","webpack://landing/./src/templates/term.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.telgorithm.com/smart-queueing/\"\n  }, \"Smart Queueing\"), \" is Telgorithm’s patent-pending product feature built for A2P 10DLC text messaging that proactively and automatically manages Carrier \", React.createElement(_components.a, {\n    href: \"https://www.telgorithm.com/glossary/throughput-limit/\"\n  }, \"rate limits\"), \" to prevent your customers from ever exceeding a limit and having messages fail. This technology is included in our SMS/MMS API services.\"), \"\\n\", React.createElement(_components.h2, null, \"What is Smart Queueing?\"), \"\\n\", React.createElement(_components.p, null, \"Smart Queueing is technology we built for A2P 10DLC text messaging that manages rate limits (throughputs) as they are sent by businesses to their consumers. Rate limit management is needed so that businesses are not exceeding their approved Carrier rate limits, which would result in failed messages, and conversely, so they are not being capped below their approved Carrier rate limits, preventing them from maximizing these limits.\"), \"\\n\", React.createElement(_components.h2, null, \"How does Smart Queueing work?\"), \"\\n\", React.createElement(_components.p, null, \"This technology proactively (prior to sending a message) manages this for you at the Brand, Campaign, phone number, and Mobile Carrier level accordingly. Smart Queueing does a proactive automatic lookup to see who (AKA which Mobile Carrier) you are about to message. \"), \"\\n\", React.createElement(_components.p, null, \"You will receive a Queueing Alert when this Campaign reaches 2/3 of its Carrier rate limits, and again when it reaches 100%. At 100%, the technology simply queues the messages that would otherwise exceed your Carrier rate limit.\"), \"\\n\", React.createElement(_components.p, null, \"Once the limit resets, the remaining messages are sent for optimal deliverability. These messages can be proactively managed for the best customer experience with features like Message Prioritization, Time Routing, and Message Expiry.\"), \"\\n\", React.createElement(_components.h2, null, \"Why is it called \\\"Smart Queueing\\\"?\"), \"\\n\", React.createElement(_components.p, null, \"There are different types of \\\"queueing\\\" in regards to A2P 10DLC text messaging. We wanted to differentiate general message queueing from our proactive, methodical approach to managing Carrier rate limits.\"), \"\\n\", React.createElement(_components.h2, null, \"What are the benefits of having Smart Queueing?\"), \"\\n\", React.createElement(_components.p, null, \"When Carrier rate limits are exceeded, the sender will experience a service disruption. The messages will fail (worst case scenario would be a Campaign or even Brand suspension), and you will still be charged for each attempted message plus Carrier pass-through fees. If messages are later re-sent, you have essentially been charged double. \"), \"\\n\", React.createElement(_components.p, null, \"Smart Queueing prevents messages from ever exceeding (and therefore failing) Carrier rate limits. This eliminates the possibility of service disruptions, paying for failed messages, paying to re-send failed messages, and a flood of support tickets from frustrated customers in regards to exceeding these limits. Smart Queueing also eliminates the risk of being \\\"\", React.createElement(_components.a, {\n    href: \"https://www.telgorithm.com/glossary/capping/\"\n  }, \"capped\"), \"\\\" at the lowest Campaign rate limit within a Brand.\"), \"\\n\", React.createElement(_components.p, null, \"An estimated 10% of all 10DLC text messages are failing each month due to exceeding Carrier rate limits – use our \", React.createElement(_components.a, {\n    href: \"https://www.telgorithm.com/payg-trial/#smart-queueing-calculator\"\n  }, \"calculator\"), \" to find out how much your team could be saving annually with Smart Queueing.\"), \"\\n\", React.createElement(_components.h2, null, \"What happens to your messaging platform if you don't have a tool like Smart Queueing?\"), \"\\n\", React.createElement(_components.p, null, \"To our knowledge, there are two approaches that API providers are taking instead of offering comprehensive rate limit management solutions.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Lifting the Ceiling: API providers are able to \\\"lift the ceiling\\\" on Carrier rate limits from their platform. What this means is that they will allow software providers to send out any amount of messages, regardless of associated Campaign's approved Carrier rate limits. This lack of rate limit management leaves software providers vulnerable to exceeding limits and experiencing disruptions while still being charged for any failed messages.\"), \"\\n\", React.createElement(_components.li, null, \"Capping at the Campaign Level: Alternatively, API providers can set a cap on the amount of messages software providers are able to send at the Campaign level so that you cannot exceed your approved Carrier rate limit. To do this, API providers would have to take the lowest approved throughputs across all Campaigns under each Brand, and make that the cap. Once the cap is reached, messages will be queued and in some cases, drastically delayed.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Is Smart Queueing a very technical feature to leverage or can anyone utilize it?\"), \"\\n\", React.createElement(_components.p, null, \"This technology does not require any effort to implement, leverage, or oversee.  Smart Queueing is automatically running across all 10DLC Brands and Campaign to manage Carrier rate limits for your customers. We have a direct integration with The Campaign Registry so that when you elect Telgorithm as your Connectivity Partner, Telgorithm receives all Carrier rate limit data so Smart Queueing can instantly begin managing on your behalf.\"), \"\\n\", React.createElement(_components.h2, null, \"What is Telgorithm's error code for exceeding 10DLC Carrier limits?\"), \"\\n\", React.createElement(_components.p, null, \"An error code implies that a message has failed; Telgorithm has zero error codes for exceeding Carrier rate limits because Smart Queueing prevents this from happening.   We send Queueing Alerts (via email) to notify our customers when a Brand or Campaign is sending at 50% and 75% of their approved Carrier limits. The purpose of these alerts is to proactively notify you that it may be time to apply for added vetting to get your limits increased. When you reach 100%, your messages are Smart Queued, meaning they're held until the limits are reset.\"), \"\\n\", React.createElement(_components.h2, null, \"How much does Smart Queueing cost?\"), \"\\n\", React.createElement(_components.p, null, \"We do not charge for our Smart Queueing technology. Our belief is that it is fundamental to A2P 10DLC text messaging, so Smart Queueing is part of our core SMS API product.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Telgorithm/website/landing/terms/smart-queueing/index.md\";\nimport {Link} from 'gatsby';\nimport React from 'react';\nimport {Helmet} from 'react-helmet';\nimport {PrimaryButton} from '../components/common/Buttons/Buttons';\nimport Layout from '../components/common/Layout/Layout';\nimport CustomLink from '../components/common/Link';\nimport {GatsbySeoComponent, TopLevelPageJSONLDSchemas} from '../components/common/SEO';\nimport {StyledBackground, TermButtons, TermContainer, TermDefinitionContainer, TermTitle, StyledTermPage, TermDefinition} from '../components/term/styled';\nimport {InternalLinks} from '../utils/links';\nimport {Text} from '../components/common/Text';\nimport {mapTermNodeToGlossaryTerm} from '../mappers';\nconst TermPage = _ref => {\n  var _data$mdx, _data$mdx2, _allTerms, _data$mdx4, _data$mdx4$fields, _data$mdx5, _data$mdx5$fields;\n  let {data, children} = _ref;\n  const {title, metaTitle} = (_data$mdx = data.mdx) === null || _data$mdx === void 0 ? void 0 : _data$mdx.frontmatter;\n  const description = data === null || data === void 0 ? void 0 : (_data$mdx2 = data.mdx) === null || _data$mdx2 === void 0 ? void 0 : _data$mdx2.excerpt;\n  const allTerms = data.allMdx.edges.map(edge => mapTermNodeToGlossaryTerm(edge.node));\n  const currentTermIndex = allTerms.findIndex(item => {\n    var _data$mdx3;\n    return item.id === ((_data$mdx3 = data.mdx) === null || _data$mdx3 === void 0 ? void 0 : _data$mdx3.id);\n  });\n  const nextTerm = (_allTerms = allTerms[currentTermIndex + 1]) !== null && _allTerms !== void 0 ? _allTerms : allTerms[0];\n  const getTitle = () => {\n    if (metaTitle) {\n      return metaTitle;\n    }\n    return title + \" | Telgorithm\";\n  };\n  return React.createElement(React.Fragment, null, React.createElement(Helmet, null, React.createElement(\"meta\", {\n    property: \"og:title\",\n    content: getTitle()\n  }), React.createElement(\"meta\", {\n    property: \"twitter:title\",\n    content: getTitle()\n  }), React.createElement(\"meta\", {\n    name: \"description\",\n    content: description\n  }), React.createElement(\"meta\", {\n    property: \"og:description\",\n    content: description\n  }), React.createElement(\"meta\", {\n    property: \"twitter:description\",\n    content: description\n  })), React.createElement(TopLevelPageJSONLDSchemas, {\n    url: 'https://www.telgorithm.com/glossary/' + ((_data$mdx4 = data.mdx) === null || _data$mdx4 === void 0 ? void 0 : (_data$mdx4$fields = _data$mdx4.fields) === null || _data$mdx4$fields === void 0 ? void 0 : _data$mdx4$fields.slug)\n  }), React.createElement(GatsbySeoComponent, {\n    canonicalUrl: 'https://www.telgorithm.com/glossary/' + ((_data$mdx5 = data.mdx) === null || _data$mdx5 === void 0 ? void 0 : (_data$mdx5$fields = _data$mdx5.fields) === null || _data$mdx5$fields === void 0 ? void 0 : _data$mdx5$fields.slug),\n    title: getTitle()\n  }), React.createElement(Layout, {\n    disabledContainer: true\n  }, React.createElement(StyledTermPage, null, React.createElement(StyledBackground, null), React.createElement(TermContainer, null, React.createElement(TermTitle, null, React.createElement(Text.Regular.Normal.md, null, \"Term\"), React.createElement(Text.Title.Bold.xl, null, title)), React.createElement(TermDefinitionContainer, null, React.createElement(Text.Regular.Normal.md, null, \"Definition\"), React.createElement(TermDefinition, null, children)), React.createElement(TermButtons, null, React.createElement(Link, {\n    to: InternalLinks.Glossary\n  }, React.createElement(PrimaryButton, null, \"Back To Glossary\")), React.createElement(CustomLink, {\n    arrow: true,\n    address: nextTerm === null || nextTerm === void 0 ? void 0 : nextTerm.url\n  }, \"View Next Term\"))))));\n};\nTermPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(TermPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst query = \"2188261531\";\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","h2","ol","li","_provideComponents","components","React","href","children","_ref","title","metaTitle","description","nextTerm","getTitle","content","canonicalUrl","Layout","StyledTermPage","StyledBackground","TermContainer","to","InternalLinks","PrimaryButton","arrow"],"sourceRoot":""}