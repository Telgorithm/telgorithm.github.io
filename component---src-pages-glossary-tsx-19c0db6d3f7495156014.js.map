{"version":3,"file":"component---src-pages-glossary-tsx-19c0db6d3f7495156014.js","mappings":"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","sources":["webpack://landing/./src/components/common/styled.ts","webpack://landing/./src/mappers/index.ts","webpack://landing/./src/components/glossary/styled.ts","webpack://landing/./src/hooks/useOnKeyDown.tsx","webpack://landing/./src/pages/glossary.tsx","webpack://landing/./src/images/CampaignSupport/BannerBackground.webp"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { colors } from '../../utils/colors';\nimport { device } from '../../utils/layoutBreakpoints';\nimport background from '../../images/CampaignSupport/BannerBackground.webp';\n\nexport const StyledTemplateContent = css`\n  blockquote {\n    padding: 0 25px;\n    box-sizing: border-box;\n    position: relative;\n    &::before {\n      display: block;\n      height: 100%;\n      width: 5px;\n      position: absolute;\n      content: '';\n      top: 0;\n      left: 0;\n      background-color: ${colors.primary.gray500};\n    }\n  }\n\n  em {\n    font-style: italic;\n  }\n\n  a {\n    color: ${colors.primary.blue};\n    &:hover {\n      color: ${colors.secondary.orange};\n    }\n  }\n\n  ol {\n    list-style: decimal;\n    padding-left: 10px;\n    margin-bottom: 15px;\n    @media ${device.tablet} {\n      padding-left: 25px;\n    }\n  }\n\n  ul {\n    list-style: inside;\n    padding-left: 10px;\n    margin-bottom: 15px;\n    @media ${device.tablet} {\n      padding-left: 25px;\n    }\n  }\n\n  li {\n    margin-top: 10px;\n    margin-bottom: 10px;\n  }\n\n  strong {\n    font-weight: 600;\n  }\n\n  p {\n    margin-bottom: 15px;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5 {\n    font-family: 'Poppins';\n    margin-bottom: 15px;\n    margin-top: 15px;\n    padding: 10px 0;\n  }\n\n  h6 {\n    font-family: 'Rubik';\n    font-size: 0.7rem;\n    color: ${colors.primary.gray500};\n    margin-top: 10px;\n    margin-bottom: 10px;\n  }\n\n  h1 {\n    font-weight: 600;\n    font-size: 1.1rem;\n    line-height: 1.4rem;\n    margin-bottom: 15px;\n  }\n\n  h2 {\n    font-size: 0.9rem;\n    line-height: 1.2rem;\n  }\n\n  h3 {\n    font-size: 0.7rem;\n    line-height: 1rem;\n  }\n\n  h4 {\n    font-size: 0.6rem;\n    line-height: 0.8rem;\n  }\n\n  h5 {\n    font-size: 0.5rem;\n    line-height: 0.7rem;\n  }\n\n  h6 {\n    font-size: 0.6rem;\n    text-align: center;\n  }\n\n  img {\n    max-width: 100%;\n  }\n\n  .gatsby-resp-image-wrapper {\n    margin-bottom: 20px;\n  }\n\n  @media ${device.laptop} {\n    font-size: 0.9rem;\n    line-height: 1.3rem;\n\n    h1 {\n      font-size: 2rem;\n      line-height: 2.6rem;\n      margin-bottom: 15px;\n    }\n\n    h2 {\n      font-size: 1.8rem;\n      line-height: 2.4rem;\n    }\n\n    h3 {\n      font-size: 1.6rem;\n      line-height: 2.2rem;\n    }\n\n    h4 {\n      font-size: 1.4rem;\n      line-height: 2rem;\n    }\n\n    h5 {\n      font-size: 1.2rem;\n      line-height: 1.8rem;\n    }\n\n    h6 {\n      font-family: 'Rubik';\n      font-size: 0.7rem;\n      color: ${colors.primary.gray500};\n    }\n  }\n`;\n\nexport const NoResultsText = styled.p`\n  word-break: break-all;\n\n  @media ${device.laptop} {\n    min-height: 300px;\n  }\n`;\n\nexport const VideoContainer = styled.div`\n  width: 300px;\n  height: 200px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  iframe {\n    width: 80%;\n    height: 80%;\n  }\n\n  @media ${device.tablet} {\n    iframe {\n      width: 100%;\n      height: 100%;\n    }\n  }\n\n  @media ${device.laptop} {\n    width: 700px;\n    height: 400px;\n  }\n`;\n\nexport const InlineBanner = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  background: url(${background});\n  background-size: cover;\n  color: ${colors.primary.white};\n  font-family: 'Poppins';\n  box-sizing: border-box;\n  border-radius: 12px;\n  gap: 30px;\n  padding: 25px;\n  line-height: 1.5rem;\n  @media ${device.tablet} {\n    padding: 40px 0;\n    p {\n      width: 60%;\n    }\n    flex-direction: row;\n  }\n`;\n\nexport const ArticleListContentContainer = styled.div`\n  @media ${device.laptop} {\n    max-width: 980px;\n    margin: 0 auto;\n  }\n`;\n\nexport const ArticleList = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 30px;\n`;\n\nexport const MediumCards = styled.div`\n  width: 100%;\n  display: grid;\n  grid-auto-rows: 1fr;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  gap: 30px;\n\n  @media ${device.laptop} {\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n`;\n\nexport const SmallCards = styled.div`\n  display: grid;\n  grid-auto-rows: 1fr;\n  gap: 30px;\n  width: 100%;\n`;\n\nexport const MobileCardsContainer = styled.div`\n  gap: 30px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  @media ${device.laptop} {\n    display: none;\n  }\n`;\n\nexport const DesktopCardsContainer = styled.div`\n  display: none;\n  @media ${device.laptop} {\n    display: flex;\n    flex-direction: column;\n    gap: 30px;\n  }\n`;\n\nexport const SmallCardWrapper = styled.div`\n  display: flex;\n`;\n\nexport const ReturnLink = styled.div`\n  color: ${colors.primary.blue};\n  font-weight: 500;\n  font-size: 0.8rem;\n  line-height: 1.3rem;\n  transition: 0.3s;\n  padding: 20px 0;\n  @media ${device.laptop} {\n    font-size: 1rem;\n    line-height: 1.4rem;\n  }\n\n  &:hover {\n    color: ${colors.secondary.orange};\n  }\n`;\n\nexport const Badge = styled.div<{ alignSelf?: string }>`\n  border-radius: 20px;\n  background-color: rgba(40, 42, 59, 0.15);\n  font-size: 14px;\n  font-weight: 500;\n  font-family: 'Rubik';\n  color: ${colors.secondary.gray700};\n  padding: 8px 12px;\n  width: fit-content;\n  align-self: ${(props) => props.alignSelf || 'center'};\n\n  @media ${device.laptop} {\n    align-self: unset;\n  }\n`;\n\nexport const SectionContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 50px 0;\n\n  @media ${device.laptop} {\n    margin: 120px 0;\n  }\n`;\n\nexport const BulletList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  li {\n    text-indent: 30px;\n    position: relative;\n    &::before {\n      content: '';\n      display: block;\n      width: 5px;\n      height: 5px;\n      position: absolute;\n      left: 15px;\n      top: 10px;\n      border-radius: 50%;\n      background-color: ${colors.primary.black};\n    }\n  }\n`;\n\nexport const StyledOl = styled.ol<{ fontWeight?: number }>`\n  list-style: decimal;\n  padding-left: 25px;\n  li::marker {\n    color: ${colors.primary.black};\n    font-size: 16px;\n    font-family: 'Rubik';\n    font-weight: ${(props) => props.fontWeight ?? 300};\n    line-height: 22px;\n\n    @media ${device.laptop} {\n      font-size: 18px;\n      line-height: 26px;\n    }\n  }\n`;\n\nexport const styledSlickDots = css`\n  .slick-dots {\n    bottom: -35px;\n    li {\n      margin: 0;\n      button::before {\n        font-size: 12px;\n      }\n      button:hover {\n        &::before {\n          color: ${colors.secondary.orange};\n        }\n      }\n    }\n\n    .slick-active {\n      button::before {\n        color: ${colors.secondary.orange};\n        opacity: 1;\n      }\n    }\n  }\n`;\n\nexport const GradientText = styled.span`\n  background: linear-gradient(90deg, #ff982b 0%, #ff4d49 100%);\n  background-clip: text;\n  background-size: 100%;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n`;\n","import { ArticleNode, ArticlePreviewInfo, BioNode, GlossaryTerm, TeamMemberInfo, TermNode } from \"../types\";\nimport { InternalLinks } from \"../utils/links\";\n\n\nexport const mapArticleNodeToArticlePreviewInfo = (source: ArticleNode) : ArticlePreviewInfo => ({\n    previewImage: source.frontmatter?.previewImage ?? null,\n    title: source.frontmatter?.title ?? \"\",\n    date: source.frontmatter?.date ?? \"\",\n    articleId: source.id,\n    type: source.frontmatter?.articleType ?? \"\",\n    url: source.fields?.slug ? `/news/${source.fields.slug}` : \"\",\n    sortByUpdatedDate: source.frontmatter?.sortByUpdatedDate ?? false,\n    lastUpdatedOn: source.frontmatter?.lastUpdatedOn ?? \"\"\n})\n\nexport const mapBioNodeToTeamMemberInfo= (source: BioNode): TeamMemberInfo => ({\n    name: `${source.frontmatter?.firstName} ${source.frontmatter?.lastName}`,\n    image: source.frontmatter?.photo!,\n    jobTitle: source.frontmatter?.position as string,\n    url: source.fields?.slug ? `${InternalLinks.Bios}${source.fields?.slug}` : \"\"\n})\n\nexport const mapTermNodeToGlossaryTerm = (source: TermNode): GlossaryTerm => ({\n    title: source.frontmatter?.title as string,\n    url: source?.fields?.slug ? `${InternalLinks.Glossary}${source.fields?.slug}` : \"\",\n    id: source.id\n})","import styled, { css } from 'styled-components';\nimport { colors } from '../../utils/colors';\nimport { device } from '../../utils/layoutBreakpoints';\nimport { Container } from '../common/Container/Container';\nimport { StyledTextInput } from '../common/Form/styled';\n\nexport const GlossaryPageContentContainer = styled(Container)`\n  max-width: 1000px;\n`;\n\nexport const HeroSection = styled.section`\n  background-color: ${colors.secondary.gray100};\n  box-sizing: border-box;\n  padding: 40px 20px;\n\n  @media ${device.laptop} {\n    height: 400px;\n    padding-top: 80px;\n    padding-bottom: 80px;\n  }\n\n  ${GlossaryPageContentContainer} {\n    display: flex;\n    flex-direction: column;\n    gap: 30px;\n  }\n`;\n\nexport const HeroInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  @media ${device.laptop} {\n    gap: 30px;\n  }\n`;\n\nexport const SearchIconContainer = styled.div`\n  position: absolute;\n  left: 20px;\n  top: calc(50% - 10px);\n`;\n\nexport const SearchButton = styled.button`\n  cursor: pointer;\n  position: absolute;\n  right: 10px;\n  top: calc(50% - 10px);\n  border: none;\n  background: none;\n  span {\n    color: ${colors.primary.blue};\n    font-weight: 600;\n  }\n  &:hover {\n    span {\n      color: ${colors.primary.lightOrange};\n    }\n  }\n`;\n\nexport const SearchContainer = styled.div`\n  position: relative;\n\n  svg {\n    width: 13px;\n    height: 13px;\n  }\n\n  ${StyledTextInput} {\n    padding-left: 40px;\n    padding-right: 80px;\n    height: 45px;\n    border-radius: 8px;\n    font-size: 12px;\n    &::placeholder {\n      color: ${colors.primary.gray500};\n      font-size: 0.9rem;\n    }\n    @media ${device.laptop} {\n      height: 60px;\n      padding-left: 50px;\n      font-size: 16px;\n    }\n  }\n\n  @media ${device.laptop} {\n    svg {\n      width: 20px;\n      height: 20px;\n    }\n  }\n`;\n\nexport const Alphabet = styled.div`\n  padding: 50px 0;\n  display: none;\n  width: 100%;\n  flex-wrap: wrap;\n  gap: 10px;\n  justify-content: center;\n  @media ${device.mobileL} {\n    justify-content: unset;\n  }\n  @media ${device.tablet} {\n    justify-content: space-between;\n  }\n  a {\n    h2 {\n      transition: 0.5s;\n      &:hover {\n        color: ${colors.secondary.orange};\n        transition: 0.5s;\n      }\n    }\n  }\n  @media ${device.laptop} {\n    display: flex;\n  }\n`;\n\nexport const TermsGroup = styled.div`\n  border-top: 1px solid ${colors.secondary.gray300};\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  padding: 30px 0;\n  @media ${device.tablet} {\n    padding: 60px 0;\n  }\n`;\n\nexport const TermsContainer = styled.div`\n  ${TermsGroup}:first-child {\n    border-top: none;\n  }\n  @media ${device.laptop} {\n    ${TermsGroup}:first-child {\n      border-top: 1px solid ${colors.secondary.gray300};\n    }\n  }\n`;\n\nexport const TermFirstLetter = styled.div``;\n\nexport const TermsList = styled.div<{ termsAmount: number }>`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  @media ${device.tablet} {\n    display: grid;\n    gap: 20px;\n  }\n  ${(props) =>\n    props.termsAmount > 2 &&\n    css`\n      a:nth-child(2) {\n        grid-column-start: 2;\n      }\n    `}\n  a > span {\n    transition: 0.5s;\n    &:hover {\n      color: ${colors.secondary.orange};\n      transition: 0.5s;\n    }\n  }\n`;\n","import { useCallback, useEffect } from 'react';\n\nconst useOnKeyDown = (\n  keyCode: string,\n  callback: () => void,\n  condition: boolean,\n) => {\n  const keyFunction = useCallback((event : KeyboardEvent) => {\n    if (event.code === keyCode) {\n      callback();\n    }\n  }, [callback]);\n\n  useEffect(() => {\n    if (condition) {\n      document.addEventListener('keydown', keyFunction);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', keyFunction);\n    };\n  }, [keyFunction, condition]);\n};\n\nexport const useOnEnterDown = (\n  callback: () => void,\n  condition = true,\n) => useOnKeyDown('Enter', callback, condition);","import React, { useEffect, useState } from 'react';\nimport Layout from '../components/common/Layout/Layout';\nimport { graphql, Link, PageProps } from 'gatsby';\nimport { mapTermNodeToGlossaryTerm } from '../mappers';\nimport { useLunr } from 'react-lunr';\nimport { GlossaryTerm } from '../types';\nimport {\n  GatsbySeoComponent,\n  MetaData,\n  TopLevelPageJSONLDSchemas,\n} from '../components/common/SEO';\nimport { Text } from '../components/common/Text';\nimport {\n  Alphabet,\n  GlossaryPageContentContainer,\n  HeroInfo,\n  HeroSection,\n  SearchButton,\n  SearchContainer,\n  SearchIconContainer,\n  TermFirstLetter,\n  TermsContainer,\n  TermsGroup,\n  TermsList,\n} from '../components/glossary/styled';\nimport { TextInput } from '../components/common/Form';\nimport SearchIcon from '../components/common/Icons/SearchIcon/SearchIcon';\nimport { NoResultsText } from '../components/common/styled';\nimport { useOnEnterDown } from '../hooks/useOnKeyDown';\nimport { StaticPageFrontmatter } from '../types/StaticPageFrontmatter';\n\nconst termsByAlphabetTemplate = JSON.stringify({\n  A: [],\n  B: [],\n  C: [],\n  D: [],\n  E: [],\n  F: [],\n  G: [],\n  H: [],\n  I: [],\n  J: [],\n  K: [],\n  L: [],\n  M: [],\n  N: [],\n  O: [],\n  P: [],\n  Q: [],\n  R: [],\n  S: [],\n  T: [],\n  U: [],\n  V: [],\n  W: [],\n  X: [],\n  Y: [],\n  Z: [],\n  '#': [],\n});\n\nconst GlossaryPage = ({ data }: PageProps<Queries.GlossaryPageQuery>) => {\n  const [tempSearchString, setTempSearchString] = useState('');\n  const [searchString, setSearchString] = useState<string>('');\n\n  const rawTerms: GlossaryTerm[] = React.useMemo(() => {\n    return data.allMdx.edges.map((edge) => mapTermNodeToGlossaryTerm(edge.node));\n  }, []);\n\n  const filteredTerms: GlossaryTerm[] = useLunr(\n    searchString.trim(),\n    data.localSearchTerms?.index,\n    data.localSearchTerms?.store,\n  ) as GlossaryTerm[];\n\n  const terms = searchString ? filteredTerms : rawTerms;\n\n  const getTermsForRender = () => {\n    const newState = { ...JSON.parse(termsByAlphabetTemplate) };\n    terms.forEach((term) => {\n      const firstLetter = term.title[0].toUpperCase();\n      if (newState[firstLetter as string]) {\n        newState[firstLetter as string]?.push(term);\n      } else {\n        newState['#'].push(term);\n      }\n    });\n    return newState;\n  };\n\n  const [termsByAlphabet, setTermsByAlphabet] = useState<Record<string, GlossaryTerm[]>>(\n    getTermsForRender(),\n  );\n\n  useEffect(() => {\n    setTermsByAlphabet(getTermsForRender());\n  }, [terms]);\n\n  const onSearchClick = () => {\n    setSearchString(tempSearchString);\n  };\n\n  useOnEnterDown(onSearchClick);\n\n  useEffect(() => {\n    if (!tempSearchString) {\n      setSearchString('');\n    }\n  }, [tempSearchString]);\n\n  const title = 'A2P Text Messaging Terms & Glossary of Definitions | Telgorithm';\n\n  return (\n    <>\n      <MetaData\n        title={title}\n        description=\"Browse through our glossary for definitions to common terms in the A2P text messaging space.\"\n      />\n      <TopLevelPageJSONLDSchemas url=\"https://www.telgorithm.com/glossary/\" />\n      <GatsbySeoComponent\n        canonicalUrl=\"https://www.telgorithm.com/glossary/\"\n        title={title}\n      />\n      <Layout disabledContainer>\n        <HeroSection>\n          <GlossaryPageContentContainer>\n            <HeroInfo>\n              <Text.Title.Bold.xl>Telgorithm’s Glossary</Text.Title.Bold.xl>\n              <Text.Regular.Bold.lg>\n                Browse through our glossary for definitions to common terms in the A2P\n                text messaging space.\n              </Text.Regular.Bold.lg>\n            </HeroInfo>\n            <SearchContainer>\n              <SearchIconContainer>\n                <SearchIcon></SearchIcon>\n              </SearchIconContainer>\n              <TextInput\n                value={tempSearchString}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setTempSearchString(e.currentTarget.value)\n                }\n              ></TextInput>\n              <SearchButton onClick={onSearchClick}>\n                <Text.Regular.Normal.xs>Search</Text.Regular.Normal.xs>\n              </SearchButton>\n            </SearchContainer>\n          </GlossaryPageContentContainer>\n        </HeroSection>\n        <GlossaryPageContentContainer>\n          <Alphabet>\n            {Object.keys(termsByAlphabet).map((letter) =>\n              termsByAlphabet[letter].length > 0 ? (\n                <Link to={`#terms_${letter}`} key={letter}>\n                  <Text.Title.Bold.md key={letter}>{letter}</Text.Title.Bold.md>\n                </Link>\n              ) : (\n                <Text.Title.Bold.md key={letter}>{letter}</Text.Title.Bold.md>\n              ),\n            )}\n          </Alphabet>\n          {terms.length ? (\n            <TermsContainer>\n              {Object.keys(termsByAlphabet)\n                .filter((letter) => termsByAlphabet[letter].length)\n                .map((letter) => (\n                  <TermsGroup key={letter} id={`terms_${letter}`}>\n                    <TermFirstLetter>\n                      <Text.Title.Bold.md>{letter}</Text.Title.Bold.md>\n                    </TermFirstLetter>\n                    <TermsList termsAmount={termsByAlphabet[letter].length}>\n                      {termsByAlphabet[letter].map((item) => (\n                        <Link to={item.url} key={item.id}>\n                          <Text.Regular.Normal.md>{item.title}</Text.Regular.Normal.md>\n                        </Link>\n                      ))}\n                    </TermsList>\n                  </TermsGroup>\n                ))}\n            </TermsContainer>\n          ) : (\n            <NoResultsText>No results for \"{searchString}\"</NoResultsText>\n          )}\n        </GlossaryPageContentContainer>\n      </Layout>\n    </>\n  );\n};\n\nexport default GlossaryPage;\n\nexport const query = graphql`\n  query GlossaryPage {\n    localSearchTerms {\n      index\n      store\n    }\n    allMdx(\n      filter: { internal: { contentFilePath: { regex: \"//terms//\" } } }\n      sort: { frontmatter: { title: ASC } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n          }\n          id\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const frontmatter: StaticPageFrontmatter = {\n  title: 'Telgorithm’s Glossary',\n  metaTitle: 'Terms',\n  excerpt:\n    'Browse through our glossary for definitions to common terms in the A2P text messaging space.',\n  slug: '/glossary/',\n};\n","export default __webpack_public_path__ + \"static/BannerBackground-daaccb1a1fa897d29da224d9a9cad8e6.webp\";"],"names":["StyledTemplateContent","css","colors","device","NoResultsText","styled","displayName","componentId","VideoContainer","ArticleListContentContainer","background","ArticleList","MediumCards","SmallCards","MobileCardsContainer","DesktopCardsContainer","SmallCardWrapper","ReturnLink","Badge","props","alignSelf","SectionContainer","BulletList","StyledOl","_props$fontWeight","fontWeight","styledSlickDots","GradientText","mapArticleNodeToArticlePreviewInfo","source","_source$frontmatter$p","_source$frontmatter","_source$frontmatter$t","_source$frontmatter2","_source$frontmatter$d","_source$frontmatter3","_source$frontmatter$a","_source$frontmatter4","_source$fields","_source$frontmatter$s","_source$frontmatter5","_source$frontmatter$l","_source$frontmatter6","previewImage","frontmatter","title","date","articleId","id","type","articleType","url","fields","slug","sortByUpdatedDate","lastUpdatedOn","mapTermNodeToGlossaryTerm","_source$frontmatter11","_source$fields4","_source$fields5","InternalLinks","GlossaryPageContentContainer","Container","withConfig","HeroSection","HeroInfo","SearchIconContainer","SearchButton","SearchContainer","StyledTextInput","Alphabet","TermsGroup","TermsContainer","TermFirstLetter","TermsList","termsAmount","useOnEnterDown","callback","condition","useOnKeyDown","keyCode","keyFunction","useCallback","event","code","useEffect","document","addEventListener","removeEventListener","termsByAlphabetTemplate","JSON","stringify","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","_ref","_data$localSearchTerm","_data$localSearchTerm2","data","tempSearchString","setTempSearchString","useState","searchString","setSearchString","rawTerms","React","allMdx","edges","map","edge","node","filteredTerms","useLunr","trim","localSearchTerms","index","store","terms","getTermsForRender","newState","parse","forEach","term","firstLetter","toUpperCase","_newState","push","termsByAlphabet","setTermsByAlphabet","onSearchClick","MetaData","description","TopLevelPageJSONLDSchemas","GatsbySeoComponent","canonicalUrl","Layout","disabledContainer","Text","SearchIcon","TextInput","value","onChange","e","currentTarget","onClick","Object","keys","letter","length","Link","to","key","filter","item","metaTitle","excerpt"],"sourceRoot":""}